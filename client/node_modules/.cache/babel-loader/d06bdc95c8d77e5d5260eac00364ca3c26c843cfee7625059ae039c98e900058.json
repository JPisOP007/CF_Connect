{"ast":null,"code":"import api from'./auth';export const productsAPI={// Get all products\ngetProducts:async function(){let params=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};try{const queryString=new URLSearchParams(params).toString();const response=await api.get(`/products${queryString?`?${queryString}`:''}`);return response.data;}catch(error){var _error$response;throw((_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.data)||{message:'Failed to fetch products'};}},// Get single product\ngetProduct:async id=>{try{const response=await api.get(`/products/${id}`);return response.data;}catch(error){var _error$response2;throw((_error$response2=error.response)===null||_error$response2===void 0?void 0:_error$response2.data)||{message:'Failed to fetch product'};}},// Create product (suppliers only)\ncreateProduct:async productData=>{try{const response=await api.post('/products',productData);return response.data;}catch(error){var _error$response3;throw((_error$response3=error.response)===null||_error$response3===void 0?void 0:_error$response3.data)||{message:'Failed to create product'};}},// Update product (suppliers only)\nupdateProduct:async(id,productData)=>{try{const response=await api.put(`/products/${id}`,productData);return response.data;}catch(error){var _error$response4;throw((_error$response4=error.response)===null||_error$response4===void 0?void 0:_error$response4.data)||{message:'Failed to update product'};}},// Delete product (suppliers only)\ndeleteProduct:async id=>{try{const response=await api.delete(`/products/${id}`);return response.data;}catch(error){var _error$response5;throw((_error$response5=error.response)===null||_error$response5===void 0?void 0:_error$response5.data)||{message:'Failed to delete product'};}},// Get products by category\ngetProductsByCategory:async category=>{try{const response=await api.get(`/products?category=${category}`);return response.data;}catch(error){var _error$response6;throw((_error$response6=error.response)===null||_error$response6===void 0?void 0:_error$response6.data)||{message:'Failed to fetch products by category'};}},// Search products\nsearchProducts:async searchTerm=>{try{const response=await api.get(`/products?search=${searchTerm}`);return response.data;}catch(error){var _error$response7;throw((_error$response7=error.response)===null||_error$response7===void 0?void 0:_error$response7.data)||{message:'Failed to search products'};}}};","map":{"version":3,"names":["api","productsAPI","getProducts","params","arguments","length","undefined","queryString","URLSearchParams","toString","response","get","data","error","_error$response","message","getProduct","id","_error$response2","createProduct","productData","post","_error$response3","updateProduct","put","_error$response4","deleteProduct","delete","_error$response5","getProductsByCategory","category","_error$response6","searchProducts","searchTerm","_error$response7"],"sources":["C:/Users/sjaya/CF_Connect/client/src/api/products.js"],"sourcesContent":["import api from './auth';\r\n\r\nexport const productsAPI = {\r\n  // Get all products\r\n  getProducts: async (params = {}) => {\r\n    try {\r\n      const queryString = new URLSearchParams(params).toString();\r\n      const response = await api.get(`/products${queryString ? `?${queryString}` : ''}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || { message: 'Failed to fetch products' };\r\n    }\r\n  },\r\n\r\n  // Get single product\r\n  getProduct: async (id) => {\r\n    try {\r\n      const response = await api.get(`/products/${id}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || { message: 'Failed to fetch product' };\r\n    }\r\n  },\r\n\r\n  // Create product (suppliers only)\r\n  createProduct: async (productData) => {\r\n    try {\r\n      const response = await api.post('/products', productData);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || { message: 'Failed to create product' };\r\n    }\r\n  },\r\n\r\n  // Update product (suppliers only)\r\n  updateProduct: async (id, productData) => {\r\n    try {\r\n      const response = await api.put(`/products/${id}`, productData);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || { message: 'Failed to update product' };\r\n    }\r\n  },\r\n\r\n  // Delete product (suppliers only)\r\n  deleteProduct: async (id) => {\r\n    try {\r\n      const response = await api.delete(`/products/${id}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || { message: 'Failed to delete product' };\r\n    }\r\n  },\r\n\r\n  // Get products by category\r\n  getProductsByCategory: async (category) => {\r\n    try {\r\n      const response = await api.get(`/products?category=${category}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || { message: 'Failed to fetch products by category' };\r\n    }\r\n  },\r\n\r\n  // Search products\r\n  searchProducts: async (searchTerm) => {\r\n    try {\r\n      const response = await api.get(`/products?search=${searchTerm}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || { message: 'Failed to search products' };\r\n    }\r\n  },\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}